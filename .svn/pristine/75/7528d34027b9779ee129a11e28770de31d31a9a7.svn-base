var databaseOperation = require('./databaseOperation');
var logger = global.logger;
var http = require('http');


function isMarketOpenTime() {
	var now = new Date();
	var day = now.getDay();
	if (day == 6 || day == 7) {
		return false;
	}

	var hour = now.getHours();
	var min = now.getMinutes();
	if (hour < 9 || hour > 15 || (hour == 9 && min < 30) || (hour == 15 && min > 0)) {
		return false;
	}
	return true;
}

function getMarketDesc(stock_code) {
	if (stock_code.indexOf("3") == 0 || stock_code.indexOf("0") == 0) {
		return "sz";
	}
	if (stock_code.indexOf("6") == 0) {
		return "sh";
	}
	return "";
}


function getStockInfo(stockCodeArr, isnow) {
	var urlChild = "";
	for (var i = 0; i < stockCodeArr.length; ++i) {
		urlChild = urlChild + "," + getMarketDesc(stockCodeArr[i]) + stockCodeArr[i];
		if (i % 30 == 0 || i + 1 >= stockCodeArr.length) {
			getStockInfoFromAPI(urlChild, isnow);
			urlChild = "";
		}
	}
}


function insertToDatabase(htmlData, isnow) {

	var elementArr = htmlData.split(";");
	if (elementArr.length == 0) {
		logger.warn('elementArr is empty');
		return;
	}

	elementArr.forEach(function(elementStr){
		var beginIndex = elementStr.indexOf("\"");
		var endIndex = elementStr.lastIndexOf("\"");
		if (beginIndex!=-1&&endIndex!=-1) {
			var data = elementStr.substr(beginIndex + 1, endIndex - beginIndex - 1);
			if (data != null) {
				var dataArr = data.split("~");
				if(dataArr.length<48){
					logger.warn('elementArr is empty');

					return;
				}
				var stockCode = dataArr[2];
				var amount = dataArr[6];
				var yesterday_price = dataArr[4];
				var date = dataArr[30];
				date = date.substr(0, 4)+"-"+date.substr(4, 2)+"-"+date.substr(6, 2);

				var time = dataArr[30];
				time = time.substr(8, 2)+":"+time.substr(10, 2)+":"+time.substr(12, 2);
				var price = dataArr[3];

				var fluctuate = dataArr[32];
				var priceearning = dataArr[39];
				var marketValue = dataArr[45];
				var pb = dataArr[46];
				var flowMarketValue = dataArr[44];
				var volume = dataArr[37];

				if (stockCode === undefined ||
					amount === undefined ||
					date === undefined ||
					time === undefined ||
					price === undefined ||
					yesterday_price === undefined) {
						//logger.warn('stockCode is undefined');
					return;
				}
				
				if (isnow === true) {
					databaseOperation.insertStockNow(stockCode, amount, date, time, 
						price, 
						yesterday_price, 
						fluctuate,
						priceearning,
						marketValue,
						flowMarketValue,
						volume,
						pb,
						function(flag, result) {
							//logger.debug(stockCode+" now insert");
							if (!flag) {
								if (result.errno != 1062) {
									//不是主键冲突
									logger.error(result);
								}
							}else{
								//logger.info('insertStockNow ok');
							}
						});

				} else {
					
					databaseOperation.insertStockAmount(stockCode, amount, date, time, price,
						fluctuate,
						priceearning,
						marketValue,
						flowMarketValue, 
						volume,
						pb,
						function(flag, result) {
							logger.debug(stockCode +" insertStockAmount pb "+pb);
							if (!flag) {
								if (result.errno != 1062) {
									//不是主键冲突
									logger.error(result);
								}
							}else{
								logger.debug(stockCode+" day info insert");
								updateStockBaseInfo(stockCode, priceearning, marketValue, flowMarketValue, pb);
								caculateVolumeProportion(stockCode);
							}
						}
					);
				}
			}
		}
	});
}

function getPlusMinus(num){
	if (num>0) {
		return 1;
	}else if (num == 0) {
		return 0
	}else{
		return -1
	}
}

function updateStockBaseInfo(stockCode, priceearning, marketValue, flowMarketValue, pb){

	var roe = 0;
	if (priceearning!=0&&pb!=0
		&&priceearning!=null&&pb!=null) {
		roe = (pb*100/priceearning).toFixed(2);
	}
	
	databaseOperation.updateStockBaseInfo(stockCode, priceearning, marketValue, flowMarketValue, pb, roe, function(flag, result){
		if (!flag) {
			logger.error(result);
		}
	});
}

function caculateVolumeProportion(stockCode){
	databaseOperation.getStockByCode(stockCode, function(flag, result){
		if (flag) {
			if (result.length>=4) {
				var element0 = result[0];
				var element1 = result[1];
				var element2 = result[2];
				var element3 = result[3];
				var day2 = element0.volume*getPlusMinus(element0.fluctuate)
				+element1.volume*getPlusMinus(element1.fluctuate);

				var day3 = day2+element2.volume*getPlusMinus(element2.fluctuate);

				var day4 = day3+element3.volume*getPlusMinus(element3.fluctuate);

				databaseOperation.updateVolumeProportion(stockCode, day2, day3, day4, function(flag, result){
					if (!flag) {
						logger.error(result);
					}
				});
			}
		}else{
			logger.error(result);
		}
	});
}


function getStockInfoFromAPI(urlChild, isnow) {
	var stockAPI = "http://qt.gtimg.cn/q=" + urlChild;
	//logger.debug(stockAPI);

	http.get(stockAPI, function(res) {
		if (res.statusCode == 200) {
			var htmlData = "";
			res.on('data', function(data) {
				htmlData += data;
			});

			res.on('end', function() {
				insertToDatabase(htmlData, isnow);
			});
		}
	}).on('error', function(e) {
		logger.error("Got error: " + e.message);
	});
}


function exitProgram(){
	databaseOperation.endPool(function(err){
		if (err) {
			logger.error(err);
		}else{
			logger.info('exitProgram');
		}
	});
}

exports.startGetAllStockInfo = function(){

	// var now = new Date();
	// var day = now.getDay();
	// if(day == 6||day == 7){
	// 	return;
	// }
	
	// var hour = now.getHours();
	// if(hour<15){
	// 	return;
	// }

	//setTimeout(exitProgram, 1000*60*2);

	//delete the stock_now_info
	databaseOperation.emptyStockNowInfo(function(flag, result){
		if (!flag) {
			logger.error(result);
		}
	});


	databaseOperation.getAllStockCode(function(flag, result) {
		if (flag) {
			var stockCodeArr = [];
			result.forEach(function(item) {
				stockCodeArr.push(item.stock_code);

			});
			if (stockCodeArr.length > 0) {
				logger.debug("enter getAllStockInfo");
				getStockInfo(stockCodeArr, false);
			}
		} else {
			logger.error(result);
		}
	});
}


function formatDate(now){
	var year = now.getFullYear();
	var month = now.getMonth()+1;
	if(month<10){
		month = "0"+month;
	}
	var date = now.getDate();
	if(date<10){
		date = "0"+date;
	}
	return year+"-"+month+"-"+date;
}




exports.startCrawlStockNow = function(){
	// if (!isMarketOpenTime()) {
	// 	logger.debug("not market time");
	// 	return;
	// }

	//setTimeout(exitProgram, 1000*60*2);


	logger.info("enter getAllStockInfoNow");
	databaseOperation.getAllStockCode(function(flag, result) {
		if (flag) {
			var stockCodeArr = [];
			result.forEach(function(item) {
				stockCodeArr.push(item.stock_code);
			});
			if (stockCodeArr.length > 0) {
				logger.debug("enter getAllStockInfoNow");
				getStockInfo(stockCodeArr, true);
			}
		} else {
			logger.error(result);
		}
	});
}